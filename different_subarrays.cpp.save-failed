#include <bits/stdc++.h>

using namespace std;

int main()
{
    int N, M;
    cin >> N >> M;
    vector<long long> A;
    for (int i = 0; i != N; ++i)
    {
        long long temp;
        cin >> temp;
        A.push_back(temp);
    }

    int first = 0;
    int last = 0;

    map<long long, int> counts;
    vector<int> leaps;
    int distincts = 0;

    while (true)
    {
        if (distincts < M && last < N)
        {
            if (counts.find(A[last]) == counts.end())
            {
                counts[A[last]] = 1;
                distincts += 1;
            }
            last += 1;
        }
        else if (distincts >= M)
        {
            leaps.push_back(last - first);
            counts[first] -= 1;
            if (counts[first] == 0)
            {
                distincts -= 1;
                counts.erase(counts.find(first));
            }
            first += 1;
        }
        else
        {
            for (int i = leaps.size(); i != A.size(); ++i)
            {
                leaps.push_back(-1);
            }
        }
    }

    for (auto x: leaps)
    {
        cout << x << "\n";
    }

    int K;
    cin >> K;
    return 0;
}
